{% extends '@OpenApiAssistant/layout.html.twig' %}

{% block head %}
    <link rel="stylesheet" href="https://unpkg.com/@highlightjs/cdn-assets@11.9.0/styles/github-dark.min.css">
    <script src="https://unpkg.com/@highlightjs/cdn-assets@11.9.0/highlight.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js"></script>
    <style>
        .monaco-editor {
            outline: none !important;
        }
        .monaco-editor .lines-content .core-guide-indent {
            --indent-color: #35404e !important;
            --indent-color-active: #53647b !important;
        }
        .monaco-editor [class*="bracket-highlighting-"] {
            color: #bcbec4 !important;
        }
    </style>
    <script>
        require.config({ paths: {'vs': 'https://cdn.jsdelivr.net/npm/monaco-editor@0.50.0/min/vs'}});

        require(['vs/editor/editor.main'], function() {
            monaco.editor.defineTheme('vs-dark-json', {
                base: 'vs-dark',
                inherit: true,
                rules: [
                    { token: 'string.value.json', foreground: '6aab73' },
                    { token: 'string.key.json', foreground: 'c77dbb' },
                    { token: 'number.json', foreground: '2aacb8' },
                    { token: 'keyword.json', foreground: 'cf8e6d' },
                    { token: 'delimiter.bracket.json', foreground: 'ffffff' },
                    { token: 'delimiter.array.json', foreground: 'ffffff' },
                ],
                colors: {
                    'editor.background': '#182134',
                    'editor.lineHighlightBorder': "#182134",
                    'editorLineNumber.foreground': '#475569',
                    'editorBracketMatch.border': '#182134',
                    'editor.wordHighlightBackground': '#29385b',
                    'editor.inactiveSelectionBackground': '#31436d',
                },
            });

            monaco.languages.registerCompletionItemProvider('json', {
                provideCompletionItems: function (model, position) {
                    if (model.uri.scheme !== 'inmemory') {
                        return [];
                    }

                    const word = model.getWordUntilPosition(position);
                    const range = {
                        startLineNumber: position.lineNumber,
                        endLineNumber: position.lineNumber,
                        startColumn: word.startColumn,
                        endColumn: word.endColumn,
                    };

                    return {
                        suggestions: [
                            {
                                label: 'uuid',
                                kind: monaco.languages.CompletionItemKind.Function,
                                documentation: "A Universal Unique Identifier (UUID)",
                                insertText: '"${1:id}": "' + crypto.randomUUID() + '"',
                                insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                                range: range,
                            },
                            {
                                label: 'password',
                                kind: monaco.languages.CompletionItemKind.Function,
                                documentation: "A password field type",
                                insertText: '"${1:password}": "********"',
                                insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                                range: range,
                            },
                            {
                                label: 'date',
                                kind: monaco.languages.CompletionItemKind.Function,
                                documentation: "A date field type (ISO 8601)",
                                insertText: '"${1:date}": "${2:' + new Date().toISOString().split('T')[0] + '}"',
                                insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                                range: range,
                            },
                            {
                                label: 'datetime',
                                kind: monaco.languages.CompletionItemKind.Function,
                                documentation: "A datetime field type (ISO 8601)",
                                insertText: '"${1:datetime}": "${2:' + new Date().toISOString() + '}"',
                                insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                                range: range,
                            },
                            {
                                label: 'bool',
                                kind: monaco.languages.CompletionItemKind.Function,
                                documentation: "A boolean field type",
                                insertText: '"${1:boolean}": true',
                                insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                                range: range,
                            },
                            {
                                label: 'int',
                                kind: monaco.languages.CompletionItemKind.Function,
                                documentation: "An integer field type",
                                insertText: '"${1:integer}": ${2:' + Math.floor(Math.random() * 100) + '}',
                                insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                                range: range,
                            },
                            {
                                label: 'float',
                                kind: monaco.languages.CompletionItemKind.Function,
                                documentation: "A float field type",
                                insertText: '"${1:float}": ${2:' + (Math.random() * 100).toFixed(2) + '}',
                                insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                                range: range,
                            },
                            {
                                label: 'enum',
                                kind: monaco.languages.CompletionItemKind.Function,
                                documentation: "An enum field type",
                                insertText: '"${1:enum}": ["${2:case1}", "${3:case2}"]',
                                insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                                range: range,
                            },
                        ],
                    };
                },
            });
        });

        class MonacoEditor extends HTMLElement {
            defaultOptions = {
                fontSize: 14,
                theme: 'vs-dark-json',
                automaticLayout: true,
                lineNumbersMinChars: 3,
                lineNumbers: (lineNumber) => {
                    return lineNumber.toString().padStart(2, '0');
                },
                minimap: {
                    enabled: false
                },
            }

            constructor() {
                super();
            }

            connectedCallback() {
                const self = this;
                const id = self.getAttribute('id'); self.removeAttribute('id');
                const name = self.getAttribute('name'); self.removeAttribute('name');
                const value = self.getAttribute('value'); self.removeAttribute('value');
                const language = self.getAttribute('language');
                const schemaUri = self.getAttribute('schema-uri');
                const form = self.closest('form');

                // add hidden input to the form
                const hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.name = name;
                hiddenInput.value = value;
                form.appendChild(hiddenInput);

                document.addEventListener('DOMContentLoaded', function () {
                    require(['vs/editor/editor.main'], function() {
                        const modelUri = schemaUri ? monaco.Uri.parse(schemaUri) : null;
                        const model = monaco.editor.createModel(value, language, modelUri);

                        if (schemaUri) {
                            fetch(schemaUri)
                                .then(response => response.json())
                                .then(schema => {
                                    monaco.languages.json.jsonDefaults.setDiagnosticsOptions({
                                        validate: true,
                                        schemas: [{
                                            uri: schemaUri,
                                            fileMatch: [modelUri.toString()],
                                            schema,
                                        }]
                                    });
                                })
                            ;
                        }

                        self.editor = monaco.editor.create(self, { model, ...self.defaultOptions });

                        self.editor.onDidChangeModelContent(() => {
                            form.elements[name].value = self.editor.getValue();
                        });

                        self.querySelector('textarea').setAttribute('id', id);
                    });
                })
            }
        }

        customElements.define('monaco-editor', MonacoEditor);
    </script>
{% endblock %}

{% block content %}
    <form action="{{ path('openapi_assistant') }}" method="post" name="form">
        <div class="container mx-auto max-w-5xl px-5">
            <h2 class="text-base font-semibold leading-7 text-white mt-6">New Endpoint</h2>
            <p class="mb-1 text-sm leading-6 text-slate-400">Create API endpoints and specs from payloads.</p>

            {% set form_errors = form.vars.errors|length %}
            {% if form_errors > 0 %}
                <div class="rounded-md bg-rose-950 p-4 mt-4">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-rose-400">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z" />
                            </svg>
                        </div>
                        <div class="ml-3">
                            <h3 class="text-sm font-medium text-rose-400">There {{ form_errors > 1 ? 'were' : 'is' }} {{ form_errors }} error{{ form_errors > 1 ? 's' }} with your submission</h3>
                            <div class="mt-2 text-sm text-rose-400">
                                <ul role="list" class="list-disc space-y-1 pl-5">
                                    {% for error in form.vars.errors %}
                                        <li>{{ error.message }}</li>
                                    {% endfor %}
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            {% endif %}

            <div class="space-y-4">
                <div class="space-y-4 sm:space-x-4 sm:flex">
                    <div class="mt-4 sm:flex-none">
                        <label for="{{ form.method.vars.id }}" class="block text-sm font-medium leading-6 text-white">Method</label>
                        <div class="mt-2">
                            {{ form_widget(form.method, {'attr': {'class': 'block rounded-md border-0 bg-slate-800/60 py-1.5 text-white shadow-sm ring-1 ring-inset ' ~ (form.method.vars.errors|length > 0 ? 'ring-2 ring-rose-500 focus:ring-rose-500' : 'ring-white/10') ~ ' focus:ring-2 focus:ring-inset focus:ring-indigo-500 sm:text-sm sm:leading-6 [&_*]:text-black'}}) }}
                            {% for error in form.method.vars.errors %}
                                <p class="mt-2 text-sm text-rose-500">{{ error.message }}</p>
                            {% endfor %}
                        </div>
                    </div>

                    <div class="sm:flex-1 sm:grow">
                        <label for="{{ form.uri.vars.id }}" class="block text-sm font-medium leading-6 text-white">URI</label>
                        <div class="mt-2">
                            <div class="flex rounded-md bg-slate-800/60 ring-1 ring-inset {{ form.uri.vars.errors|length > 0 ? 'ring-2 ring-rose-500 focus-within:ring-rose-500' : 'ring-white/10' }} focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-500">
                                <label for="{{ form.uri.vars.id }}"
                                       class="flex select-none items-center pl-3 text-slate-500 sm:text-sm">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="-ml-1 mr-1 w-4 h-4">
                                        <path fill-rule="evenodd" d="M8 1a3.5 3.5 0 0 0-3.5 3.5V7A1.5 1.5 0 0 0 3 8.5v5A1.5 1.5 0 0 0 4.5 15h7a1.5 1.5 0 0 0 1.5-1.5v-5A1.5 1.5 0 0 0 11.5 7V4.5A3.5 3.5 0 0 0 8 1Zm2 6V4.5a2 2 0 1 0-4 0V7h4Z" clip-rule="evenodd" />
                                    </svg>
                                    https://localhost/
                                </label>
                                <input type="text"
                                       autofocus="autofocus"
                                       name="{{ field_name(form.uri) }}"
                                       autocomplete="off"
                                       required
                                       id="{{ form.uri.vars.id }}"
                                       class="flex-1 border-0 bg-transparent py-1.5 pl-0 text-white focus:ring-0 sm:text-sm sm:leading-6"
                                       placeholder="products"
                                       value="{{ field_value(form.uri) }}"
                                >
                            </div>
                            {% for error in form.uri.vars.errors %}
                                <p class="mt-2 text-sm text-rose-500">{{ error.message }}</p>
                            {% endfor %}
                        </div>
                    </div>
                </div>

                <div class="space-y-4 md:space-y-0 md:space-x-4 md:flex">
                    <div class="md:flex-1">
                        <div class="flex items-center">
                            <label for="{{ form.req.vars.id }}" class="block text-sm font-medium leading-6 text-white">request.json</label>
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"
                                 class="w-5 h-5 fill-white ml-1 hidden">
                                <path fill-rule="evenodd"
                                      d="M16.704 4.153a.75.75 0 0 1 .143 1.052l-8 10.5a.75.75 0 0 1-1.127.075l-4.5-4.5a.75.75 0 0 1 1.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 0 1 1.05-.143Z"
                                      clip-rule="evenodd"/>
                            </svg>
                        </div>
                        <div class="mt-2">
                            <monaco-editor id="{{ form.req.vars.id }}"
                                           name="{{ field_name(form.req) }}"
                                           value="{{ field_value(form.req) }}"
                                           class="block w-full h-[16rem] rounded-md border-0 bg-slate-800/60 pt-2.5 pb-1.5 pl-2.5 pr-0.5 text-white shadow-sm ring-1 ring-inset focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-500 focus-visible:outline-none {{ form.req.vars.errors|length > 0 ? 'ring-2 ring-rose-500 focus-within:ring-rose-500' : 'ring-white/10' }} sm:text-sm sm:leading-6"
                                           language="json"
                            ></monaco-editor>
                            {% for error in form.req.vars.errors %}
                                <p class="mt-2 text-sm text-rose-500">{{ error.message }}</p>
                            {% endfor %}
                        </div>
                    </div>

                    <div class="md:flex-1">
                        <div class="flex items-center">
                            <label for="{{ form.res.vars.id }}" class="block text-sm font-medium leading-6 text-white">response.json</label>
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"
                                 class="w-5 h-5 fill-white ml-1 hidden">
                                <path fill-rule="evenodd"
                                      d="M16.704 4.153a.75.75 0 0 1 .143 1.052l-8 10.5a.75.75 0 0 1-1.127.075l-4.5-4.5a.75.75 0 0 1 1.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 0 1 1.05-.143Z"
                                      clip-rule="evenodd"/>
                            </svg>
                        </div>
                        <div class="mt-2">
                            <monaco-editor id="{{ form.res.vars.id }}"
                                           name="{{ field_name(form.res) }}"
                                           value="{{ field_value(form.res) }}"
                                           class="block w-full h-[16rem] rounded-md border-0 bg-slate-800/60 pt-2.5 pb-1.5 pl-2.5 pr-0.5 text-white shadow-sm ring-1 ring-inset focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-500 focus-visible:outline-none {{ form.req.vars.errors|length > 0 ? 'ring-2 ring-rose-500 focus-within:ring-rose-500' : 'ring-white/10' }} sm:text-sm sm:leading-6"
                                           language="json"
                            ></monaco-editor>
                            {% for error in form.res.vars.errors %}
                                <p class="mt-2 text-sm text-rose-500">{{ error.message }}</p>
                            {% endfor %}
                        </div>
                    </div>
                </div>
            </div>

            <div class="mt-4 flex items-center justify-between gap-x-6">
                <button type="submit"
                        name="action"
                        value="preview"
                        class="inline-flex items-center gap-x-1.5 rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="-ml-0.5 h-5 w-5">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M9.813 15.904 9 18.75l-.813-2.846a4.5 4.5 0 0 0-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 0 0 3.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 0 0 3.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 0 0-3.09 3.09ZM18.259 8.715 18 9.75l-.259-1.035a3.375 3.375 0 0 0-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 0 0 2.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 0 0 2.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 0 0-2.456 2.456ZM16.894 20.567 16.5 21.75l-.394-1.183a2.25 2.25 0 0 0-1.423-1.423L13.5 18.75l1.183-.394a2.25 2.25 0 0 0 1.423-1.423l.394-1.183.394 1.183a2.25 2.25 0 0 0 1.423 1.423l1.183.394-1.183.394a2.25 2.25 0 0 0-1.423 1.423Z" />
                    </svg>
                    Preview
                </button>
                <button type="reset" class="rounded-md bg-white/10 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-white/20">Reset</button>
            </div>
        </div>

        <div class="container mx-auto max-w-5xl px-5">
            <hr class="border-slate-800 my-6">
        </div>

        {{ include('@OpenApiAssistant/assistant/preview.html.twig') }}
    </form>
{% endblock %}
